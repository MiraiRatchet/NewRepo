name: CI

on:
  push:
    branches:
      - hw1

env:
  BUILD_TYPE: Debug

jobs:
  cppcheck:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install cppcheck
        run: |
          sudo apt-get update -y
          sudo apt-get install -y cppcheck

      - name: Run cppcheck
        run: cppcheck --enable=all --suppress=missingInclude --std=c++20 ./src ./tests

  clang-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install clang-format
        run: |
          sudo apt-get update -y
          sudo apt-get install -y clang-format

      - name: Run clang-format
        run: clang-format --dry-run --Werror -style=file:./config/.clang-format ./src/*.cpp ./App/include/*.hpp ./App/src/*.cpp -- -I./include

  clang-tidy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install clang-tidy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y clang-tidy
          
      - name: Build
        run: |
          cmake -B build
          cmake --build build

      - name: Run clang-tidy
        run: |
          clang-tidy --config-file=./config/.clang-tidy ./src/*.cpp ./App/src/App.cpp ./App/include/App.hpp -p build
        # clang-tidy --config-file=./config/.clang-tidy ./tests/*.cpp -- -I./googletest/include -I./include

  cpplint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install cpplint
        run: |
          sudo apt-get update -y
          sudo apt-get install -y cpplint
      - name: Run cpplint
        run: cpplint --recursive --filter=-build/include_subdir --filter=-runtime/int --root=./ ./src ./App/src ./App/include ./tests

  build-and-test:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - name: Build
          run: |
            cmake -B build
            cmake --build build
        # - name: Run tests
        #   run: ctest --output-on-failure --repeat-until-fail 100 --test-dir ./build/tests           

# Команды с флагами, которые я юзал:
#   clang-tidy --config-file=./configs/.clang-tidy ./src/*.cpp -- -I./googletest/include -I./include
#   clang-tidy --config-file=./configs/.clang-tidy ./tests/*.cpp -- -I./googletest/include -I./include
# Да нужно по отдельности ибо иначе он не может найти "gtest/gtest.h" в тестах и выкидывает ошибку



#   cpplint --recursive --filter=-build/include_subdir --filter=-runtime/int --root=./ ./src ./include ./tests

#   ctest --output-on-failure --repeat-until-fail 100 --test-dir ./build        После того, как через cmake собрал проект в папку build

#   sudo chmod a+x ./build/tests/main_tests                         Чтобы exe с тестами можно было запустить
#   sudo valgrind --leak-check=full -s ./build/tests/main_tests     У меня по такому пути в собранном проекте exe с тестами лежит. Не самый лучший способ, но работает.



# Дока для Github Actions https://docs.github.com/en/actions (мне не очень помогла, но пусть будет)
